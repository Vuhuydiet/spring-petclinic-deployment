apiVersion: v1
kind: ConfigMap
metadata:
  name: {{ .Values.observability.grafana.name }}-datasources
data:
  datasources.yaml: |
    apiVersion: 1
    datasources:
      - name: Prometheus
        type: prometheus
        uid: prometheus
        access: proxy
        url: http://{{ .Values.observability.prometheus.name }}:{{ .Values.observability.prometheus.port }}
        isDefault: true
        
      - name: Loki
        type: loki
        uid: loki
        access: proxy
        url: http://{{ .Values.observability.loki.name }}:{{ .Values.observability.loki.port }}
        jsonData:
          maxLines: 1000
          derivedFields:
            - name: TraceID
              matcherRegex: "\\[([a-f0-9]{16}),([a-f0-9]*?)\\]"
              url: "http://{{ .Values.observability.zipkin.name }}:{{ .Values.observability.zipkin.port }}/zipkin/traces/$1"
              datasourceUid: zipkin
              urlDisplayLabel: "View Trace"
            - name: SpanID  
              matcherRegex: "\\[([a-f0-9]*?),([a-f0-9]{16})\\]"
              url: "http://{{ .Values.observability.zipkin.name }}:{{ .Values.observability.zipkin.port }}/zipkin/traces/$1/$2"
              datasourceUid: zipkin
              urlDisplayLabel: "View Span"
          timeout: 60
          httpHeaderName1: X-Scope-OrgID
        
      - name: Zipkin
        type: zipkin
        uid: zipkin
        access: proxy
        url: http://{{ .Values.observability.zipkin.name }}:{{ .Values.observability.zipkin.port }}
        jsonData:
          tracesToLogs:
            datasourceUid: loki
            tags: ['job', 'instance', 'pod', 'namespace', 'application']
            mappedTags: [
              { key: 'service.name', value: 'application' },
              { key: 'k8s.pod.name', value: 'pod' },
              { key: 'k8s.namespace.name', value: 'namespace' }
            ]
            mapTagNamesEnabled: true
            spanStartTimeShift: '-1h'
            spanEndTimeShift: '1h'
            filterByTraceID: true
            filterBySpanID: false
            lokiSearch: true
            customQuery: true

---
apiVersion: v1
kind: ConfigMap
metadata:
  name: {{ .Values.observability.grafana.name }}-dashboard
data:
  spring-petclinic-dashboard.json: |
    {
      "id": null,
      "title": "Spring PetClinic Dashboard",
      "tags": ["petclinic"],
      "style": "dark",
      "timezone": "browser",
      "editable": true,
      "graphTooltip": 0,
      "panels": [
        {
          "id": 1,
          "title": "HTTP Request Rate",
          "type": "stat",
          "targets": [
            {
              "expr": "sum(rate(http_server_requests_seconds_count[5m]))",
              "refId": "A",
              "datasource": {
                "type": "prometheus",
                "uid": "prometheus"
              }
            }
          ],
          "fieldConfig": {
            "defaults": {
              "color": {
                "mode": "thresholds"
              },
              "thresholds": {
                "steps": [
                  {"color": "green", "value": null},
                  {"color": "yellow", "value": 50},
                  {"color": "red", "value": 100}
                ]
              },
              "unit": "reqps"
            }
          },
          "gridPos": {"h": 8, "w": 12, "x": 0, "y": 0}
        },
        {
          "id": 2,
          "title": "Request Rate by Service",
          "type": "timeseries",
          "targets": [
            {
              "expr": "sum(rate(http_server_requests_seconds_count[5m])) by (job)",
              "refId": "A",
              "legendFormat": "{{ "{{" }}job{{ "}}" }}",
              "datasource": {
                "type": "prometheus",
                "uid": "prometheus"
              }
            }
          ],
          "fieldConfig": {
            "defaults": {
              "color": {
                "mode": "palette-classic"
              },
              "unit": "reqps"
            }
          },
          "gridPos": {"h": 8, "w": 12, "x": 12, "y": 0}
        },
        {
          "id": 3,
          "title": "HTTP Success Rate",
          "type": "stat",
          "targets": [
            {
              "expr": "sum(rate(http_server_requests_seconds_count{status=~\"2..\"}[5m]))",
              "refId": "A",
              "datasource": {
                "type": "prometheus",
                "uid": "prometheus"
              }
            }
          ],
          "fieldConfig": {
            "defaults": {
              "color": {
                "mode": "thresholds"
              },
              "thresholds": {
                "steps": [
                  {"color": "red", "value": null},
                  {"color": "yellow", "value": 1},
                  {"color": "green", "value": 10}
                ]
              },
              "unit": "reqps"
            }
          },
          "gridPos": {"h": 8, "w": 12, "x": 0, "y": 8}
        },
        {
          "id": 4,
          "title": "HTTP Error Rate",
          "type": "stat",
          "targets": [
            {
              "expr": "sum(rate(http_server_requests_seconds_count{status=~\"5..\"}[5m]))",
              "refId": "A",
              "datasource": {
                "type": "prometheus",
                "uid": "prometheus"
              }
            }
          ],
          "fieldConfig": {
            "defaults": {
              "color": {
                "mode": "thresholds"
              },
              "thresholds": {
                "steps": [
                  {"color": "green", "value": null},
                  {"color": "yellow", "value": 1},
                  {"color": "red", "value": 10}
                ]
              },
              "unit": "reqps"
            }
          },
          "gridPos": {"h": 8, "w": 12, "x": 12, "y": 8}
        },
        {
          "id": 5,
          "title": "JVM Memory Usage",
          "type": "timeseries",
          "targets": [
            {
              "expr": "sum(jvm_memory_used_bytes) by (job)",
              "refId": "A",
              "legendFormat": "{{ "{{" }}job{{ "}}" }}",
              "datasource": {
                "type": "prometheus",
                "uid": "prometheus"
              }
            }
          ],
          "fieldConfig": {
            "defaults": {
              "color": {
                "mode": "palette-classic"
              },
              "unit": "bytes"
            }
          },
          "gridPos": {"h": 8, "w": 24, "x": 0, "y": 16}
        }
      ],
      "time": {
        "from": "now-1h",
        "to": "now"
      },
      "timepicker": {},
      "templating": {
        "list": [
          {
            "name": "service",
            "type": "query",
            "datasource": {
              "type": "prometheus",
              "uid": "prometheus"
            },
            "query": "label_values(job)",
            "regex": "",
            "allValue": ".*",
            "includeAll": true,
            "multi": true,
            "current": {
              "selected": true,
              "text": "All",
              "value": "$__all"
            },
            "options": [],
            "refresh": 1,
            "sort": 1
          }
        ]
      },
      "annotations": {
        "list": []
      },
      "refresh": "5s",
      "schemaVersion": 30,
      "version": 1
    }

---
apiVersion: v1
kind: ConfigMap
metadata:
  name: {{ .Values.observability.grafana.name }}-dashboards
data:
  dashboards.yaml: |
    apiVersion: 1
    providers:
      - name: 'default'
        orgId: 1
        folder: 'PetClinic'
        folderUid: 'petclinic-folder'
        type: file
        disableDeletion: false
        editable: true
        updateIntervalSeconds: 10
        allowUiUpdates: true
        options:
          path: /var/lib/grafana/dashboards

---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ .Values.observability.grafana.name }}
spec:
  replicas: 1
  strategy:
    type: Recreate  # Ensures old pod is terminated before new one starts
  selector:
    matchLabels:
      app: {{ .Values.observability.grafana.name }}
  template:
    metadata:
      labels:
        app: {{ .Values.observability.grafana.name }}
    spec:
      {{- if .Values.observability.tolerateMemoryPressure }}
      tolerations:
      - key: node.kubernetes.io/memory-pressure
        operator: Exists
        effect: NoSchedule
      {{- end }}
      securityContext:
        runAsUser: 472
        runAsGroup: 472
        fsGroup: 472
      containers:
      - name: {{ .Values.observability.grafana.name }}
        image: "{{ .Values.observability.grafana.image.name }}:{{ .Values.observability.grafana.image.tag }}"
        ports:
        - containerPort: {{ .Values.observability.grafana.targetPort }}
        env:
        - name: GF_SECURITY_ADMIN_USER
          value: "{{ .Values.observability.grafana.adminUser }}"
        - name: GF_SECURITY_ADMIN_PASSWORD
          value: "{{ .Values.observability.grafana.adminPassword }}"
        - name: GF_PATHS_PROVISIONING
          value: "/etc/grafana/provisioning"
        volumeMounts:
        - name: grafana-datasources
          mountPath: /etc/grafana/provisioning/datasources
        - name: grafana-dashboards-config
          mountPath: /etc/grafana/provisioning/dashboards
        - name: grafana-dashboards
          mountPath: /var/lib/grafana/dashboards
        - name: grafana-storage
          mountPath: /var/lib/grafana
        livenessProbe:
          httpGet:
            path: /api/health
            port: {{ .Values.observability.grafana.targetPort }}
          initialDelaySeconds: 30
          periodSeconds: 10
        readinessProbe:
          httpGet:
            path: /api/health
            port: {{ .Values.observability.grafana.targetPort }}
          initialDelaySeconds: 5
          periodSeconds: 5
      volumes:
      - name: grafana-datasources
        configMap:
          name: {{ .Values.observability.grafana.name }}-datasources
      - name: grafana-dashboards-config
        configMap:
          name: {{ .Values.observability.grafana.name }}-dashboards
      - name: grafana-dashboards
        configMap:
          name: {{ .Values.observability.grafana.name }}-dashboard
      - name: grafana-storage
        {{- if .Values.observability.useEmptyDirVolumes }}
        emptyDir: {}
        {{- else }}
        persistentVolumeClaim:
          claimName: {{ .Values.observability.grafana.name }}-pvc
        {{- end }}

---
apiVersion: v1
kind: Service
metadata:
  name: {{ .Values.observability.grafana.name }}
spec:
  selector:
    app: {{ .Values.observability.grafana.name }}
  ports:
    - protocol: TCP
      port: {{ .Values.observability.grafana.port }}
      targetPort: {{ .Values.observability.grafana.targetPort }}
  type: {{ .Values.observability.grafana.serviceType }}

{{- if not .Values.observability.useEmptyDirVolumes }}
---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: {{ .Values.observability.grafana.name }}-pvc
spec:
  accessModes:
    - ReadWriteOnce
  storageClassName: do-block-storage
  resources:
    requests:
      storage: {{ .Values.observability.grafana.storage | default "2Gi" }}
{{- end }}