apiVersion: v1
kind: ConfigMap
metadata:
  name: {{ .Values.observability.grafana.name }}-datasources
data:
  datasources.yaml: |
    apiVersion: 1
    datasources:
      - name: Prometheus
        type: prometheus
        access: proxy
        url: http://{{ .Values.observability.prometheus.name }}:{{ .Values.observability.prometheus.port }}
        isDefault: true
        
      - name: Loki
        type: loki
        access: proxy
        url: http://{{ .Values.observability.loki.name }}:{{ .Values.observability.loki.port }}
        
      - name: Zipkin
        type: zipkin
        access: proxy
        url: http://{{ .Values.observability.zipkin.name }}:{{ .Values.observability.zipkin.port }}
        jsonData:
          tracesToLogs:
            datasourceUid: loki
            tags: ['job', 'instance', 'pod', 'namespace']
            mappedTags: [{ key: 'service.name', value: 'service' }]
            mapTagNamesEnabled: false
            spanStartTimeShift: '1h'
            spanEndTimeShift: '1h'
            filterByTraceID: false
            filterBySpanID: false
            lokiSearch: true

---
apiVersion: v1
kind: ConfigMap
metadata:
  name: {{ .Values.observability.grafana.name }}-dashboard
data:
  petclinic-observability-dashboard.json: |
    {
      "dashboard": {
        "id": null,
        "title": "Spring PetClinic Observability Dashboard",
        "tags": ["petclinic", "observability"],
        "style": "dark",
        "timezone": "browser",
        "panels": [
          {
            "id": 1,
            "title": "Total Request Rate",
            "type": "stat",
            "targets": [
              {
                "expr": "sum(rate(http_server_requests_total[5m]))",
                "refId": "A"
              }
            ],
            "fieldConfig": {
              "defaults": {
                "color": {
                  "mode": "thresholds"
                },
                "thresholds": {
                  "steps": [
                    {"color": "green", "value": null},
                    {"color": "yellow", "value": 50},
                    {"color": "red", "value": 100}
                  ]
                },
                "unit": "reqps"
              }
            },
            "gridPos": {"h": 8, "w": 6, "x": 0, "y": 0}
          },
          {
            "id": 2,
            "title": "Success Rate (2xx)",
            "type": "stat",
            "targets": [
              {
                "expr": "sum(rate(http_server_requests_total{status=~\"2..\"}[5m])) / sum(rate(http_server_requests_total[5m])) * 100",
                "refId": "A"
              }
            ],
            "fieldConfig": {
              "defaults": {
                "color": {
                  "mode": "thresholds"
                },
                "thresholds": {
                  "steps": [
                    {"color": "red", "value": null},
                    {"color": "yellow", "value": 90},
                    {"color": "green", "value": 95}
                  ]
                },
                "unit": "percent"
              }
            },
            "gridPos": {"h": 8, "w": 6, "x": 6, "y": 0}
          },
          {
            "id": 3,
            "title": "Error Rate (5xx)",
            "type": "stat",
            "targets": [
              {
                "expr": "sum(rate(http_server_requests_total{status=~\"5..\"}[5m]))",
                "refId": "A"
              }
            ],
            "fieldConfig": {
              "defaults": {
                "color": {
                  "mode": "thresholds"
                },
                "thresholds": {
                  "steps": [
                    {"color": "green", "value": null},
                    {"color": "yellow", "value": 1},
                    {"color": "red", "value": 10}
                  ]
                },
                "unit": "reqps"
              }
            },
            "alert": {
              "conditions": [
                {
                  "evaluator": {
                    "params": [10],
                    "type": "gt"
                  },
                  "operator": {
                    "type": "and"
                  },
                  "query": {
                    "params": ["A", "30s", "now"]
                  },
                  "reducer": {
                    "type": "avg"
                  },
                  "type": "query"
                }
              ],
              "executionErrorState": "alerting",
              "frequency": "10s",
              "handler": 1,
              "name": "High 5xx Error Rate Alert",
              "noDataState": "no_data",
              "notifications": []
            },
            "gridPos": {"h": 8, "w": 6, "x": 12, "y": 0}
          },
          {
            "id": 4,
            "title": "Response Time (95th percentile)",
            "type": "stat",
            "targets": [
              {
                "expr": "histogram_quantile(0.95, sum(rate(http_server_requests_duration_seconds_bucket[5m])) by (le))",
                "refId": "A"
              }
            ],
            "fieldConfig": {
              "defaults": {
                "color": {
                  "mode": "thresholds"
                },
                "thresholds": {
                  "steps": [
                    {"color": "green", "value": null},
                    {"color": "yellow", "value": 0.5},
                    {"color": "red", "value": 1}
                  ]
                },
                "unit": "s"
              }
            },
            "gridPos": {"h": 8, "w": 6, "x": 18, "y": 0}
          },
          {
            "id": 5,
            "title": "Request Rate by Service",
            "type": "graph",
            "targets": [
              {
                "expr": "sum(rate(http_server_requests_total[5m])) by (job)",
                "refId": "A",
                "legendFormat": "{{ "{{" }}job{{ "}}" }}"
              }
            ],
            "gridPos": {"h": 8, "w": 12, "x": 0, "y": 8},
            "yAxes": [
              {
                "label": "Requests/sec",
                "show": true
              },
              {
                "show": true
              }
            ]
          },
          {
            "id": 6,
            "title": "Response Time Distribution",
            "type": "graph",
            "targets": [
              {
                "expr": "histogram_quantile(0.50, sum(rate(http_server_requests_duration_seconds_bucket[5m])) by (le))",
                "refId": "A",
                "legendFormat": "50th percentile"
              },
              {
                "expr": "histogram_quantile(0.95, sum(rate(http_server_requests_duration_seconds_bucket[5m])) by (le))",
                "refId": "B",
                "legendFormat": "95th percentile"
              },
              {
                "expr": "histogram_quantile(0.99, sum(rate(http_server_requests_duration_seconds_bucket[5m])) by (le))",
                "refId": "C",
                "legendFormat": "99th percentile"
              }
            ],
            "gridPos": {"h": 8, "w": 12, "x": 12, "y": 8},
            "yAxes": [
              {
                "label": "Duration (s)",
                "show": true
              },
              {
                "show": true
              }
            ]
          },
          {
            "id": 7,
            "title": "Correlated Logs",
            "type": "logs",
            "targets": [
              {
                "expr": "{job=~\"spring-petclinic.*\"} |= \"\"",
                "refId": "A"
              }
            ],
            "gridPos": {"h": 10, "w": 24, "x": 0, "y": 16},
            "options": {
              "showTime": true,
              "showLabels": true,
              "showCommonLabels": false,
              "wrapLogMessage": false,
              "sortOrder": "Descending"
            }
          }
        ],
        "time": {
          "from": "now-1h",
          "to": "now"
        },
        "timepicker": {},
        "templating": {
          "list": []
        },
        "annotations": {
          "list": []
        },
        "refresh": "5s",
        "schemaVersion": 30,
        "version": 0,
        "gnetId": null
      }
    }

---
apiVersion: v1
kind: ConfigMap
metadata:
  name: {{ .Values.observability.grafana.name }}-dashboards
data:
  dashboards.yaml: |
    apiVersion: 1
    providers:
      - name: 'default'
        orgId: 1
        folder: ''
        type: file
        disableDeletion: false
        editable: true
        updateIntervalSeconds: 10
        allowUiUpdates: true
        options:
          path: /var/lib/grafana/dashboards

---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ .Values.observability.grafana.name }}
spec:
  replicas: 1
  strategy:
    type: Recreate  # Ensures old pod is terminated before new one starts
  selector:
    matchLabels:
      app: {{ .Values.observability.grafana.name }}
  template:
    metadata:
      labels:
        app: {{ .Values.observability.grafana.name }}
    spec:
      {{- if .Values.observability.tolerateMemoryPressure }}
      tolerations:
      - key: node.kubernetes.io/memory-pressure
        operator: Exists
        effect: NoSchedule
      {{- end }}
      containers:
      - name: {{ .Values.observability.grafana.name }}
        image: "{{ .Values.observability.grafana.image.name }}:{{ .Values.observability.grafana.image.tag }}"
        ports:
        - containerPort: {{ .Values.observability.grafana.targetPort }}
        env:
        - name: GF_SECURITY_ADMIN_USER
          value: "{{ .Values.observability.grafana.adminUser }}"
        - name: GF_SECURITY_ADMIN_PASSWORD
          value: "{{ .Values.observability.grafana.adminPassword }}"
        - name: GF_PATHS_PROVISIONING
          value: "/etc/grafana/provisioning"
        volumeMounts:
        - name: grafana-datasources
          mountPath: /etc/grafana/provisioning/datasources
        - name: grafana-dashboards-config
          mountPath: /etc/grafana/provisioning/dashboards
        - name: grafana-dashboards
          mountPath: /var/lib/grafana/dashboards
        - name: grafana-storage
          mountPath: /var/lib/grafana
        # resources:
        #   {{- if .Values.observability.grafana.resources }}
        #   {{- toYaml .Values.observability.grafana.resources | nindent 10 }}
        #   {{- else }}
        #   requests:
        #     memory: "256Mi"
        #     cpu: "100m"
        #   limits:
        #     memory: "512Mi"
        #     cpu: "250m"
        #   {{- end }}
        livenessProbe:
          httpGet:
            path: /api/health
            port: {{ .Values.observability.grafana.targetPort }}
          initialDelaySeconds: 30
          periodSeconds: 10
        readinessProbe:
          httpGet:
            path: /api/health
            port: {{ .Values.observability.grafana.targetPort }}
          initialDelaySeconds: 5
          periodSeconds: 5
      volumes:
      - name: grafana-datasources
        configMap:
          name: {{ .Values.observability.grafana.name }}-datasources
      - name: grafana-dashboards-config
        configMap:
          name: {{ .Values.observability.grafana.name }}-dashboards
      - name: grafana-dashboards
        configMap:
          name: {{ .Values.observability.grafana.name }}-dashboard
      - name: grafana-storage
        {{- if .Values.observability.useEmptyDirVolumes }}
        emptyDir: {}
        {{- else }}
        persistentVolumeClaim:
          claimName: {{ .Values.observability.grafana.name }}-pvc
        {{- end }}

---
apiVersion: v1
kind: Service
metadata:
  name: {{ .Values.observability.grafana.name }}
spec:
  selector:
    app: {{ .Values.observability.grafana.name }}
  ports:
    - protocol: TCP
      port: {{ .Values.observability.grafana.port }}
      targetPort: {{ .Values.observability.grafana.targetPort }}
  type: {{ .Values.observability.grafana.serviceType }}

{{- if not .Values.observability.useEmptyDirVolumes }}
---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: {{ .Values.observability.grafana.name }}-pvc
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: {{ .Values.observability.grafana.storage }}
{{- end }}