apiVersion: v1
kind: ConfigMap
metadata:
  name: {{ .Values.observability.prometheus.name }}-config
data:
  prometheus.yml: |
    global:
      scrape_interval: 15s
      evaluation_interval: 15s
    
    rule_files:
      - "/etc/prometheus/rules/*.yml"
    
    alerting:
      alertmanagers:
        - static_configs:
            - targets: []
    
    scrape_configs:
      # Spring Boot Actuator endpoints for all services
      - job_name: 'spring-petclinic-config-server'
        metrics_path: '/actuator/prometheus'
        static_configs:
          - targets: ['{{ .Values.configServer.name }}:{{ .Values.configServer.port }}']
      
      - job_name: 'spring-petclinic-discovery-server'
        metrics_path: '/actuator/prometheus'
        static_configs:
          - targets: ['{{ .Values.discoveryServer.name }}:{{ .Values.discoveryServer.port }}']
      
      - job_name: 'spring-petclinic-api-gateway'
        metrics_path: '/actuator/prometheus'
        static_configs:
          - targets: ['{{ .Values.services.apiGateway.name }}:{{ .Values.services.apiGateway.port }}']
      
      - job_name: 'spring-petclinic-admin-server'
        metrics_path: '/actuator/prometheus'
        static_configs:
          - targets: ['{{ .Values.services.adminServer.name }}:{{ .Values.services.adminServer.port }}']
      
      - job_name: 'spring-petclinic-customers-service'
        metrics_path: '/actuator/prometheus'
        static_configs:
          - targets: ['{{ .Values.services.customersService.name }}:{{ .Values.services.customersService.port }}']
      
      - job_name: 'spring-petclinic-visits-service'
        metrics_path: '/actuator/prometheus'
        static_configs:
          - targets: ['{{ .Values.services.visitsService.name }}:{{ .Values.services.visitsService.port }}']
      
      - job_name: 'spring-petclinic-vets-service'
        metrics_path: '/actuator/prometheus'
        static_configs:
          - targets: ['{{ .Values.services.vetsService.name }}:{{ .Values.services.vetsService.port }}']

  alert_rules.yml: |
    groups:
      - name: petclinic_alerts
        rules:
          - alert: HighErrorRate
            expr: sum(rate(http_server_requests_total{status=~"5.."}[30s])) > 10
            for: 0s
            labels:
              severity: critical
            annotations:
              summary: "High 5xx error rate detected"
              description: "More than 10 5xx errors in 30 seconds: $value"
          
          - alert: ServiceDown
            expr: up == 0
            for: 1m
            labels:
              severity: critical
            annotations:
              summary: "Service $labels.instance is down"
              description: "Service $labels.instance has been down for more than 1 minute"
          
          - alert: HighLatency
            expr: histogram_quantile(0.95, sum(rate(http_server_requests_duration_seconds_bucket[5m])) by (le)) > 0.5
            for: 2m
            labels:
              severity: warning
            annotations:
              summary: "High latency detected"
              description: "95th percentile latency is above 500ms: $value s"

---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ .Values.observability.prometheus.name }}
spec:
  replicas: 1
  strategy:
    type: Recreate  # Ensures old pod is terminated before new one starts
  selector:
    matchLabels:
      app: {{ .Values.observability.prometheus.name }}
  template:
    metadata:
      labels:
        app: {{ .Values.observability.prometheus.name }}
    spec:
      {{- if .Values.observability.tolerateMemoryPressure }}
      tolerations:
      - key: node.kubernetes.io/memory-pressure
        operator: Exists
        effect: NoSchedule
      {{- end }}
      securityContext:
        runAsUser: 65534
        runAsGroup: 65534
        fsGroup: 65534
      containers:
      - name: {{ .Values.observability.prometheus.name }}
        image: "{{ .Values.observability.prometheus.image.name }}:{{ .Values.observability.prometheus.image.tag }}"
        ports:
        - containerPort: {{ .Values.observability.prometheus.targetPort }}
        args:
          - '--config.file=/etc/prometheus/prometheus.yml'
          - '--storage.tsdb.path=/prometheus/'
          - '--web.console.libraries=/usr/share/prometheus/console_libraries'
          - '--web.console.templates=/usr/share/prometheus/consoles'
          - '--storage.tsdb.retention.time={{ .Values.observability.prometheus.retention }}'
          - '--web.enable-lifecycle'
        volumeMounts:
        - name: prometheus-config
          mountPath: /etc/prometheus/
        - name: prometheus-storage
          mountPath: /prometheus/
        livenessProbe:
          httpGet:
            path: /-/healthy
            port: {{ .Values.observability.prometheus.targetPort }}
          initialDelaySeconds: 30
          periodSeconds: 10
        readinessProbe:
          httpGet:
            path: /-/ready
            port: {{ .Values.observability.prometheus.targetPort }}
          initialDelaySeconds: 5
          periodSeconds: 5
      volumes:
      - name: prometheus-config
        configMap:
          name: {{ .Values.observability.prometheus.name }}-config
      - name: prometheus-storage
        {{- if .Values.observability.useEmptyDirVolumes }}
        emptyDir: {}
        {{- else }}
        persistentVolumeClaim:
          claimName: {{ .Values.observability.prometheus.name }}-pvc
        {{- end }}

---
apiVersion: v1
kind: Service
metadata:
  name: {{ .Values.observability.prometheus.name }}
spec:
  selector:
    app: {{ .Values.observability.prometheus.name }}
  ports:
    - protocol: TCP
      port: {{ .Values.observability.prometheus.port }}
      targetPort: {{ .Values.observability.prometheus.targetPort }}
  type: {{ .Values.observability.prometheus.serviceType }}

{{- if not .Values.observability.useEmptyDirVolumes }}
---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: {{ .Values.observability.prometheus.name }}-pvc
spec:
  accessModes:
    - ReadWriteOnce
  storageClassName: do-block-storage
  resources:
    requests:
      storage: {{ .Values.observability.prometheus.storage | default "8Gi" }}
{{- end }}